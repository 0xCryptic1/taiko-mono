/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestBridgeInterface extends ethers.utils.Interface {
  functions: {
    "addressManager()": FunctionFragment;
    "context()": FunctionFragment;
    "getMessageStatus(bytes32)": FunctionFragment;
    "getMessageStatusSlot(bytes32)": FunctionFragment;
    "hashMessage((uint256,address,uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,bytes,string))": FunctionFragment;
    "init(address)": FunctionFragment;
    "isDestChainEnabled(uint256)": FunctionFragment;
    "isMessageFailed(bytes32,uint256,bytes)": FunctionFragment;
    "isMessageReceived(bytes32,uint256,bytes)": FunctionFragment;
    "isMessageSent(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "processMessage((uint256,address,uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,bytes,string),bytes)": FunctionFragment;
    "releaseEther((uint256,address,uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,bytes,string),bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resolve(string,bool)": FunctionFragment;
    "retryMessage((uint256,address,uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,bytes,string),bool)": FunctionFragment;
    "sendMessage((uint256,address,uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,bytes,string))": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "context", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMessageStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageStatusSlot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashMessage",
    values: [
      {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isDestChainEnabled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isMessageFailed",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMessageReceived",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMessageSent",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processMessage",
    values: [
      {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseEther",
    values: [
      {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolve",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "retryMessage",
    values: [
      {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [
      {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "context", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMessageStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageStatusSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDestChainEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMessageFailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMessageReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMessageSent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retryMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "DestChainEnabled(uint256,bool)": EventFragment;
    "EtherReleased(bytes32,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MessageSent(bytes32,tuple)": EventFragment;
    "MessageStatusChanged(bytes32,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SignalSent(address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DestChainEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EtherReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalSent"): EventFragment;
}

export type DestChainEnabledEvent = TypedEvent<
  [BigNumber, boolean] & { chainId: BigNumber; enabled: boolean }
>;

export type EtherReleasedEvent = TypedEvent<
  [string, string, BigNumber] & {
    msgHash: string;
    to: string;
    amount: BigNumber;
  }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type MessageSentEvent = TypedEvent<
  [
    string,
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string
    ] & {
      id: BigNumber;
      sender: string;
      srcChainId: BigNumber;
      destChainId: BigNumber;
      owner: string;
      to: string;
      refundAddress: string;
      depositValue: BigNumber;
      callValue: BigNumber;
      processingFee: BigNumber;
      gasLimit: BigNumber;
      data: string;
      memo: string;
    }
  ] & {
    msgHash: string;
    message: [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string
    ] & {
      id: BigNumber;
      sender: string;
      srcChainId: BigNumber;
      destChainId: BigNumber;
      owner: string;
      to: string;
      refundAddress: string;
      depositValue: BigNumber;
      callValue: BigNumber;
      processingFee: BigNumber;
      gasLimit: BigNumber;
      data: string;
      memo: string;
    };
  }
>;

export type MessageStatusChangedEvent = TypedEvent<
  [string, number] & { msgHash: string; status: number }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SignalSentEvent = TypedEvent<
  [string, string] & { sender: string; msgHash: string }
>;

export class TestBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestBridgeInterface;

  functions: {
    addressManager(overrides?: CallOverrides): Promise<[string]>;

    context(
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber] & {
          msgHash: string;
          sender: string;
          srcChainId: BigNumber;
        }
      ]
    >;

    getMessageStatus(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getMessageStatusSlot(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashMessage(
      message: {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    init(
      _addressManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isDestChainEnabled(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMessageFailed(
      msgHash: BytesLike,
      destChainId: BigNumberish,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMessageReceived(
      msgHash: BytesLike,
      srcChainId: BigNumberish,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMessageSent(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    processMessage(
      message: {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      proof: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseEther(
      message: {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      proof: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "resolve(string,bool)"(
      name: string,
      allowZeroAddress: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "resolve(uint256,string,bool)"(
      chainId: BigNumberish,
      name: string,
      allowZeroAddress: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    retryMessage(
      message: {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      isLastAttempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendMessage(
      message: {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addressManager(overrides?: CallOverrides): Promise<string>;

  context(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      msgHash: string;
      sender: string;
      srcChainId: BigNumber;
    }
  >;

  getMessageStatus(
    msgHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  getMessageStatusSlot(
    msgHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  hashMessage(
    message: {
      id: BigNumberish;
      sender: string;
      srcChainId: BigNumberish;
      destChainId: BigNumberish;
      owner: string;
      to: string;
      refundAddress: string;
      depositValue: BigNumberish;
      callValue: BigNumberish;
      processingFee: BigNumberish;
      gasLimit: BigNumberish;
      data: BytesLike;
      memo: string;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  init(
    _addressManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isDestChainEnabled(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMessageFailed(
    msgHash: BytesLike,
    destChainId: BigNumberish,
    proof: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMessageReceived(
    msgHash: BytesLike,
    srcChainId: BigNumberish,
    proof: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMessageSent(
    msgHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  processMessage(
    message: {
      id: BigNumberish;
      sender: string;
      srcChainId: BigNumberish;
      destChainId: BigNumberish;
      owner: string;
      to: string;
      refundAddress: string;
      depositValue: BigNumberish;
      callValue: BigNumberish;
      processingFee: BigNumberish;
      gasLimit: BigNumberish;
      data: BytesLike;
      memo: string;
    },
    proof: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseEther(
    message: {
      id: BigNumberish;
      sender: string;
      srcChainId: BigNumberish;
      destChainId: BigNumberish;
      owner: string;
      to: string;
      refundAddress: string;
      depositValue: BigNumberish;
      callValue: BigNumberish;
      processingFee: BigNumberish;
      gasLimit: BigNumberish;
      data: BytesLike;
      memo: string;
    },
    proof: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "resolve(string,bool)"(
    name: string,
    allowZeroAddress: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  "resolve(uint256,string,bool)"(
    chainId: BigNumberish,
    name: string,
    allowZeroAddress: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  retryMessage(
    message: {
      id: BigNumberish;
      sender: string;
      srcChainId: BigNumberish;
      destChainId: BigNumberish;
      owner: string;
      to: string;
      refundAddress: string;
      depositValue: BigNumberish;
      callValue: BigNumberish;
      processingFee: BigNumberish;
      gasLimit: BigNumberish;
      data: BytesLike;
      memo: string;
    },
    isLastAttempt: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendMessage(
    message: {
      id: BigNumberish;
      sender: string;
      srcChainId: BigNumberish;
      destChainId: BigNumberish;
      owner: string;
      to: string;
      refundAddress: string;
      depositValue: BigNumberish;
      callValue: BigNumberish;
      processingFee: BigNumberish;
      gasLimit: BigNumberish;
      data: BytesLike;
      memo: string;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addressManager(overrides?: CallOverrides): Promise<string>;

    context(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        msgHash: string;
        sender: string;
        srcChainId: BigNumber;
      }
    >;

    getMessageStatus(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    getMessageStatusSlot(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    hashMessage(
      message: {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    init(_addressManager: string, overrides?: CallOverrides): Promise<void>;

    isDestChainEnabled(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMessageFailed(
      msgHash: BytesLike,
      destChainId: BigNumberish,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMessageReceived(
      msgHash: BytesLike,
      srcChainId: BigNumberish,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMessageSent(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    processMessage(
      message: {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseEther(
      message: {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "resolve(string,bool)"(
      name: string,
      allowZeroAddress: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "resolve(uint256,string,bool)"(
      chainId: BigNumberish,
      name: string,
      allowZeroAddress: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    retryMessage(
      message: {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      isLastAttempt: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessage(
      message: {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DestChainEnabled(uint256,bool)"(
      chainId?: BigNumberish | null,
      enabled?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { chainId: BigNumber; enabled: boolean }
    >;

    DestChainEnabled(
      chainId?: BigNumberish | null,
      enabled?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { chainId: BigNumber; enabled: boolean }
    >;

    "EtherReleased(bytes32,address,uint256)"(
      msgHash?: BytesLike | null,
      to?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { msgHash: string; to: string; amount: BigNumber }
    >;

    EtherReleased(
      msgHash?: BytesLike | null,
      to?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { msgHash: string; to: string; amount: BigNumber }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "MessageSent(bytes32,tuple)"(
      msgHash?: BytesLike | null,
      message?: null
    ): TypedEventFilter<
      [
        string,
        [
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          id: BigNumber;
          sender: string;
          srcChainId: BigNumber;
          destChainId: BigNumber;
          owner: string;
          to: string;
          refundAddress: string;
          depositValue: BigNumber;
          callValue: BigNumber;
          processingFee: BigNumber;
          gasLimit: BigNumber;
          data: string;
          memo: string;
        }
      ],
      {
        msgHash: string;
        message: [
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          id: BigNumber;
          sender: string;
          srcChainId: BigNumber;
          destChainId: BigNumber;
          owner: string;
          to: string;
          refundAddress: string;
          depositValue: BigNumber;
          callValue: BigNumber;
          processingFee: BigNumber;
          gasLimit: BigNumber;
          data: string;
          memo: string;
        };
      }
    >;

    MessageSent(
      msgHash?: BytesLike | null,
      message?: null
    ): TypedEventFilter<
      [
        string,
        [
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          id: BigNumber;
          sender: string;
          srcChainId: BigNumber;
          destChainId: BigNumber;
          owner: string;
          to: string;
          refundAddress: string;
          depositValue: BigNumber;
          callValue: BigNumber;
          processingFee: BigNumber;
          gasLimit: BigNumber;
          data: string;
          memo: string;
        }
      ],
      {
        msgHash: string;
        message: [
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          id: BigNumber;
          sender: string;
          srcChainId: BigNumber;
          destChainId: BigNumber;
          owner: string;
          to: string;
          refundAddress: string;
          depositValue: BigNumber;
          callValue: BigNumber;
          processingFee: BigNumber;
          gasLimit: BigNumber;
          data: string;
          memo: string;
        };
      }
    >;

    "MessageStatusChanged(bytes32,uint8)"(
      msgHash?: BytesLike | null,
      status?: null
    ): TypedEventFilter<[string, number], { msgHash: string; status: number }>;

    MessageStatusChanged(
      msgHash?: BytesLike | null,
      status?: null
    ): TypedEventFilter<[string, number], { msgHash: string; status: number }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SignalSent(address,bytes32)"(
      sender?: null,
      msgHash?: null
    ): TypedEventFilter<[string, string], { sender: string; msgHash: string }>;

    SignalSent(
      sender?: null,
      msgHash?: null
    ): TypedEventFilter<[string, string], { sender: string; msgHash: string }>;
  };

  estimateGas: {
    addressManager(overrides?: CallOverrides): Promise<BigNumber>;

    context(overrides?: CallOverrides): Promise<BigNumber>;

    getMessageStatus(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMessageStatusSlot(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashMessage(
      message: {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _addressManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isDestChainEnabled(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMessageFailed(
      msgHash: BytesLike,
      destChainId: BigNumberish,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMessageReceived(
      msgHash: BytesLike,
      srcChainId: BigNumberish,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMessageSent(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    processMessage(
      message: {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      proof: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseEther(
      message: {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      proof: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "resolve(string,bool)"(
      name: string,
      allowZeroAddress: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "resolve(uint256,string,bool)"(
      chainId: BigNumberish,
      name: string,
      allowZeroAddress: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retryMessage(
      message: {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      isLastAttempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendMessage(
      message: {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    context(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMessageStatus(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMessageStatusSlot(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashMessage(
      message: {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _addressManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isDestChainEnabled(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMessageFailed(
      msgHash: BytesLike,
      destChainId: BigNumberish,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMessageReceived(
      msgHash: BytesLike,
      srcChainId: BigNumberish,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMessageSent(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processMessage(
      message: {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      proof: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseEther(
      message: {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      proof: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "resolve(string,bool)"(
      name: string,
      allowZeroAddress: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolve(uint256,string,bool)"(
      chainId: BigNumberish,
      name: string,
      allowZeroAddress: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retryMessage(
      message: {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      isLastAttempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendMessage(
      message: {
        id: BigNumberish;
        sender: string;
        srcChainId: BigNumberish;
        destChainId: BigNumberish;
        owner: string;
        to: string;
        refundAddress: string;
        depositValue: BigNumberish;
        callValue: BigNumberish;
        processingFee: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
        memo: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
