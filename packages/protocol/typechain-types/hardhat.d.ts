/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bridge__factory>;
    getContractFactory(
      name: "BridgedERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgedERC20__factory>;
    getContractFactory(
      name: "EtherVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EtherVault__factory>;
    getContractFactory(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: "LibBridgeData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibBridgeData__factory>;
    getContractFactory(
      name: "LibBridgeInvoke",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibBridgeInvoke__factory>;
    getContractFactory(
      name: "LibBridgeProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibBridgeProcess__factory>;
    getContractFactory(
      name: "LibBridgeRelease",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibBridgeRelease__factory>;
    getContractFactory(
      name: "LibBridgeRetry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibBridgeRetry__factory>;
    getContractFactory(
      name: "LibBridgeStatus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibBridgeStatus__factory>;
    getContractFactory(
      name: "TokenVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenVault__factory>;
    getContractFactory(
      name: "AddressResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressResolver__factory>;
    getContractFactory(
      name: "EssentialContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EssentialContract__factory>;
    getContractFactory(
      name: "IAddressManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddressManager__factory>;
    getContractFactory(
      name: "IHeaderSync",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHeaderSync__factory>;
    getContractFactory(
      name: "IMintableERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMintableERC20__factory>;
    getContractFactory(
      name: "LibProposing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibProposing__factory>;
    getContractFactory(
      name: "LibProving",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibProving__factory>;
    getContractFactory(
      name: "LibUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibUtils__factory>;
    getContractFactory(
      name: "LibVerifying",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibVerifying__factory>;
    getContractFactory(
      name: "IProofVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProofVerifier__factory>;
    getContractFactory(
      name: "ProofVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProofVerifier__factory>;
    getContractFactory(
      name: "TaikoEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TaikoEvents__factory>;
    getContractFactory(
      name: "TaikoL1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TaikoL1__factory>;
    getContractFactory(
      name: "TkoToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TkoToken__factory>;
    getContractFactory(
      name: "TaikoL2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TaikoL2__factory>;
    getContractFactory(
      name: "LibAnchorSignature",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibAnchorSignature__factory>;
    getContractFactory(
      name: "LibInvalidTxList",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibInvalidTxList__factory>;
    getContractFactory(
      name: "LibReceiptDecoder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibReceiptDecoder__factory>;
    getContractFactory(
      name: "LibTrieProof",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibTrieProof__factory>;
    getContractFactory(
      name: "LibTxDecoder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibTxDecoder__factory>;
    getContractFactory(
      name: "ISignalService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISignalService__factory>;
    getContractFactory(
      name: "SignalService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignalService__factory>;
    getContractFactory(
      name: "TestBadReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestBadReceiver__factory>;
    getContractFactory(
      name: "TestReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestReceiver__factory>;
    getContractFactory(
      name: "TestHeaderSync",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestHeaderSync__factory>;
    getContractFactory(
      name: "TestBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestBridge__factory>;
    getContractFactory(
      name: "TestTaikoL1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestTaikoL1__factory>;
    getContractFactory(
      name: "TestTaikoL1EnableTokenomics",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestTaikoL1EnableTokenomics__factory>;
    getContractFactory(
      name: "TestTaikoL2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestTaikoL2__factory>;
    getContractFactory(
      name: "TestTaikoL2EnablePublicInputsCheck",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestTaikoL2EnablePublicInputsCheck__factory>;
    getContractFactory(
      name: "TestLib1559Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLib1559Math__factory>;
    getContractFactory(
      name: "TestLibAnchorSignature",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLibAnchorSignature__factory>;
    getContractFactory(
      name: "TestLibBlockHeader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLibBlockHeader__factory>;
    getContractFactory(
      name: "TestLibProving",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLibProving__factory>;
    getContractFactory(
      name: "TestLibReceiptDecoder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLibReceiptDecoder__factory>;
    getContractFactory(
      name: "TestLibTrieProof",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLibTrieProof__factory>;
    getContractFactory(
      name: "TestLibTxUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLibTxUtils__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "TestLibBlockHeaderDecoder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLibBlockHeaderDecoder__factory>;
    getContractFactory(
      name: "TestLibMerkleTrie",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLibMerkleTrie__factory>;
    getContractFactory(
      name: "TestLibRLPReader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLibRLPReader__factory>;
    getContractFactory(
      name: "TestLibRLPWriter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLibRLPWriter__factory>;
    getContractFactory(
      name: "TestLibSecureMerkleTrie",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLibSecureMerkleTrie__factory>;
    getContractFactory(
      name: "TestMessageSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestMessageSender__factory>;
    getContractFactory(
      name: "TestTkoToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestTkoToken__factory>;
    getContractFactory(
      name: "AddressManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressManager__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "LibBlockHeaderDecoder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibBlockHeaderDecoder__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Bridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Bridge>;
    getContractAt(
      name: "BridgedERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgedERC20>;
    getContractAt(
      name: "EtherVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EtherVault>;
    getContractAt(
      name: "IBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridge>;
    getContractAt(
      name: "LibBridgeData",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibBridgeData>;
    getContractAt(
      name: "LibBridgeInvoke",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibBridgeInvoke>;
    getContractAt(
      name: "LibBridgeProcess",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibBridgeProcess>;
    getContractAt(
      name: "LibBridgeRelease",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibBridgeRelease>;
    getContractAt(
      name: "LibBridgeRetry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibBridgeRetry>;
    getContractAt(
      name: "LibBridgeStatus",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibBridgeStatus>;
    getContractAt(
      name: "TokenVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenVault>;
    getContractAt(
      name: "AddressResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressResolver>;
    getContractAt(
      name: "EssentialContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EssentialContract>;
    getContractAt(
      name: "IAddressManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddressManager>;
    getContractAt(
      name: "IHeaderSync",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHeaderSync>;
    getContractAt(
      name: "IMintableERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMintableERC20>;
    getContractAt(
      name: "LibProposing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibProposing>;
    getContractAt(
      name: "LibProving",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibProving>;
    getContractAt(
      name: "LibUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibUtils>;
    getContractAt(
      name: "LibVerifying",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibVerifying>;
    getContractAt(
      name: "IProofVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProofVerifier>;
    getContractAt(
      name: "ProofVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProofVerifier>;
    getContractAt(
      name: "TaikoEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TaikoEvents>;
    getContractAt(
      name: "TaikoL1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TaikoL1>;
    getContractAt(
      name: "TkoToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TkoToken>;
    getContractAt(
      name: "TaikoL2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TaikoL2>;
    getContractAt(
      name: "LibAnchorSignature",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibAnchorSignature>;
    getContractAt(
      name: "LibInvalidTxList",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibInvalidTxList>;
    getContractAt(
      name: "LibReceiptDecoder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibReceiptDecoder>;
    getContractAt(
      name: "LibTrieProof",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibTrieProof>;
    getContractAt(
      name: "LibTxDecoder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibTxDecoder>;
    getContractAt(
      name: "ISignalService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISignalService>;
    getContractAt(
      name: "SignalService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignalService>;
    getContractAt(
      name: "TestBadReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestBadReceiver>;
    getContractAt(
      name: "TestReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestReceiver>;
    getContractAt(
      name: "TestHeaderSync",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestHeaderSync>;
    getContractAt(
      name: "TestBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestBridge>;
    getContractAt(
      name: "TestTaikoL1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestTaikoL1>;
    getContractAt(
      name: "TestTaikoL1EnableTokenomics",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestTaikoL1EnableTokenomics>;
    getContractAt(
      name: "TestTaikoL2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestTaikoL2>;
    getContractAt(
      name: "TestTaikoL2EnablePublicInputsCheck",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestTaikoL2EnablePublicInputsCheck>;
    getContractAt(
      name: "TestLib1559Math",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLib1559Math>;
    getContractAt(
      name: "TestLibAnchorSignature",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLibAnchorSignature>;
    getContractAt(
      name: "TestLibBlockHeader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLibBlockHeader>;
    getContractAt(
      name: "TestLibProving",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLibProving>;
    getContractAt(
      name: "TestLibReceiptDecoder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLibReceiptDecoder>;
    getContractAt(
      name: "TestLibTrieProof",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLibTrieProof>;
    getContractAt(
      name: "TestLibTxUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLibTxUtils>;
    getContractAt(
      name: "TestERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;
    getContractAt(
      name: "TestLibBlockHeaderDecoder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLibBlockHeaderDecoder>;
    getContractAt(
      name: "TestLibMerkleTrie",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLibMerkleTrie>;
    getContractAt(
      name: "TestLibRLPReader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLibRLPReader>;
    getContractAt(
      name: "TestLibRLPWriter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLibRLPWriter>;
    getContractAt(
      name: "TestLibSecureMerkleTrie",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLibSecureMerkleTrie>;
    getContractAt(
      name: "TestMessageSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestMessageSender>;
    getContractAt(
      name: "TestTkoToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestTkoToken>;
    getContractAt(
      name: "AddressManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressManager>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "LibBlockHeaderDecoder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibBlockHeaderDecoder>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
